groups: []

resources:
- name: concourse-deploy-cloudfoundry
  type: git
  check_every: 1h
  source:
    uri: https://github.com/enaml-ops/concourse-deploy-cloudfoundry
    branch: master
- name: omg-cli
  type: github-release
  check_every: 1h
  source:
    user: enaml-ops
    repository: omg-cli
- name: omg-cli-product-bundle
  type: github-release
  check_every: 1h
  source:
    user: enaml-ops
    repository: omg-product-bundle
- name: pipeline-tasks
  type: git
  check_every: 1h
  source:
    uri: https://github.com/18f/cg-pipeline-tasks.git
    branch: master
- name: {{deployment-name}}
  type: bosh-deployment
  check_every: 1h
  source:
    ca_cert: {{bosh-cacert}}
    client_id: {{bosh-client-id}}
    client_secret: {{bosh-client-secret}}
    deployment: cf
    target: {{bosh-target}}
- name: stemcell
  type: bosh-io-stemcell
  check_every: 1h
  source:
    name: {{stemcell}}
- name: slack
  type: slack-notification
  check_every: 1h
  source:
    url: https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

jobs:
- name: deploy
  plan:
    - get: concourse-deploy-cloudfoundry
    - get: omg-cli
    - get: omg-cli-product-bundle
      trigger: true
      params:
        globs:
        - cloudfoundry-plugin-*
    - get: stemcell
    - task: get-versions
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: virtmerlin/deploy-worker
        run:
          path: concourse-deploy-cloudfoundry/ci/tasks/get-versions-from-plugin.sh
        params:
          CLOUD_CONFIG_PLUGIN: {{cloud_config_plugin}}
          PRODUCT: elastic-runtime
          PRODUCT_PLUGIN: {{product_plugin}}
          VERSION: latest
          OUTPUT_DIR: versions
        inputs:
        - name: concourse-deploy-cloudfoundry
        - name: omg-cli
        - name: omg-cli-product-bundle
        outputs:
        - name: versions
          path: ""
    - task: generate-manifest
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: virtmerlin/deploy-worker
        run:
          path: concourse-deploy-cloudfoundry/ci/tasks/generate-pcf-manifest.sh
        params:
          BOSH_CLIENT: {{bosh-user}}
          BOSH_CLIENT_SECRET: {{bosh-pass}}
          BOSH_CACERT: {{bosh-cacert}}
          CLOUD_CONFIG_PLUGIN: {{cloud_config_plugin}}
          PRODUCT_PLUGIN: {{product_plugin}}
          VAULT_ADDR: {{vault_addr}}
          VAULT_HASH_IP: {{vault_hash_ip}}
          VAULT_HASH_HOSTVARS: {{vault_hash_hostvars}}
          VAULT_HASH_KEYCERT: {{vault_hash_keycert}}
          VAULT_HASH_PASSWORD: {{vault_hash_password}}
          VAULT_TOKEN: {{vault_token}}
          OUTPUT_DIR: manifest
        inputs:
        - name: concourse-deploy-cloudfoundry
        - name: omg-cli
        - name: omg-cli-product-bundle
        - name: stemcell
        - name: versions
        outputs:
        - name: manifest
          path: ""
    - task: get-elastic-runtime
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: virtmerlin/deploy-worker
        run:
          path: concourse-deploy-cloudfoundry/ci/tasks/get-product-from-pivnet.sh
        params:
          PRODUCT: elastic-runtime
          PRODUCT_NAME: "PCF Elastic Runtime"
          VERSION: from-omg-plugin
          PIVNET_API_TOKEN: {{pivnet_api_token}}
          OUTPUT_DIR: elastic-runtime
        inputs:
        - name: concourse-deploy-cloudfoundry
        - name: versions
        outputs:
        - name: elastic-runtime
          path: ""
    - task: get-stemcell
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: virtmerlin/deploy-worker
        run:
          path: concourse-deploy-cloudfoundry/ci/tasks/get-product-from-pivnet.sh
        params:
          PRODUCT: stemcells
          VERSION: latest
          STEMCELL_CPI: vSphere
          PIVNET_API_TOKEN: {{pivnet_api_token}}
          OUTPUT_DIR: stemcells
        inputs:
        - name: concourse-deploy-cloudfoundry
        outputs:
        - name: stemcells
          path: ""
    - put: {{deployment-name}}
      params:
        manifest: manifest/deployment.yml
        stemcells:
        - stemcells/stemcells*.pivotal
        releases:
        - elastic-runtime/releases/*.tgz
      on_success:
        put: slack
        params:
          text: |
            :white_check_mark: Successfully deployed {{deployment-name}} CF
            <https://{{concourse-url}}/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: {{slack-channel}}
          username: {{slack-username}}
          icon_url: {{slack-icon-url}}
      on_failure:
        put: slack
        params:
          text: |
            :x: FAILED to deploy {{deployment-name}} CF
            <https://{{concourse-url}}/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: {{slack-channel}}
          username: {{slack-username}}
          icon_url: {{slack-icon-url}}
- name: run-smoke-tests
  plan:
  - aggregate:
    - get: pipeline-tasks
      trigger: false
    - get: {{deployment-name}}
      passed: [deploy]
      trigger: true
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{bosh-target}}
      BOSH_USERNAME: {{bosh-user}}
      BOSH_PASSWORD: {{bosh-pass}}
      BOSH_DEPLOYMENT_NAME: {{deployment-name}}
      BOSH_ERRAND: smoke_tests
      BOSH_CACERT: {{bosh-cacert}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Smoke tests for {{deployment-name}} CF passed
          <https://{{concourse-url}}/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_failure:
      put: slack
      params:
        text: |
          :x: Smoke tests for {{deployment-name}} CF failed
          <https://{{concourse-url}}/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
- name: run-acceptance-tests
  plan:
  - aggregate:
    - get: pipeline-tasks
      trigger: false
    - get: {{deployment-name}}
      passed: [run-smoke-tests]
      trigger: true
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{bosh-target}}
      BOSH_USERNAME: {{bosh-user}}
      BOSH_PASSWORD: {{bosh-pass}}
      BOSH_DEPLOYMENT_NAME: {{deployment-name}}
      BOSH_ERRAND: smoke_tests
      BOSH_CACERT: {{bosh-cacert}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Acceptance tests for {{deployment-name}} CF passed
          <https://{{concourse-url}}/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_failure:
      put: slack
      params:
        text: |
          :x: Acceptance tests for {{deployment-name}} CF failed
          <https://{{concourse-url}}/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
