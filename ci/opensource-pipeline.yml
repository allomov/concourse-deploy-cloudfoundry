groups:
- name: all
  jobs:
  - populate-or-rotate-vault
  - deploy
- name: deploy
  jobs:
  - populate-or-rotate-vault
  - deploy

resources:
- name: cf-release
  type: bosh-io-release
  check_every: 1m
  source:
    repository: cloudfoundry/cf-release
- name: garden-release
  type: bosh-io-release
  check_every: 1m
  source:
    repository: cloudfoundry/garden-linux-release
- name: diego-release
  type: bosh-io-release
  check_every: 1m
  source:
    repository: cloudfoundry/diego-release
- name: etcd-release
  type: bosh-io-release
  check_every: 1m
  source:
    repository: cloudfoundry-incubator/etcd-release
- name: cf-mysql-release
  type: bosh-io-release
  check_every: 1m
  source:
    repository: cloudfoundry/cf-mysql-release
- name: cflinuxfs2-release
  type: bosh-io-release
  check_every: 1m
  source:
    repository: cloudfoundry/cflinuxfs2-rootfs-release
- name: stemcell
  type: bosh-io-stemcell
  check_every: 1m
  source:
    force_regular: true
    name: {{stemcell-name}}
- name: concourse-deploy-cloudfoundry
  type: git
  check_every: 1m
  source:
    uri: https://github.com/enaml-ops/concourse-deploy-cloudfoundry
    branch: master
- name: omg-cli
  type: github-release
  check_every: 1m
  source:
    user: enaml-ops
    repository: omg-cli
- name: omg-product-bundle
  type: github-release
  check_every: 1h
  source:
    user: enaml-ops
    repository: omg-product-bundle
- name: pipeline-tasks
  type: git
  check_every: 1h
  source:
    uri: https://github.com/18f/cg-pipeline-tasks.git
    branch: master
- name: {{deployment-name}}
  type: bosh-deployment
  source:
    ca_cert: {{bosh-cacert}}
    client_id: {{bosh-client-id}}
    client_secret: {{bosh-client-secret}}
    deployment: cf
    target: {{bosh-url}}
- name: slack
  type: slack-notification
  source:
    url: {{slack-url}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

jobs:
- name: populate-or-rotate-vault
  plan:
    - get: concourse-deploy-cloudfoundry
    - get: omg-cli
      params:
        globs:
        - omg-linux
    - get: omg-product-bundle
      trigger: true
      params:
        globs:
        - {{product-plugin}} 
    - task: populate-or-rotate
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: virtmerlin/deploy-worker
        run:
          path: concourse-deploy-cloudfoundry/ci/oss-tasks/populate-or-rotate-vault.sh
        params:
          SKIP_HAPROXY: {{skip-haproxy}}
          PRODUCT_PLUGIN: {{product-plugin}}
          SYSTEM_DOMAIN: {{system-domain}}
          VAULT_ADDR: {{vault-addr}}
          VAULT_HASH_IP: {{vault-hash-ip}}
          VAULT_HASH_HOSTVARS: {{vault-hash-hostvars}}
          VAULT_HASH_KEYCERT: {{vault-hash-keycert}}
          VAULT_HASH_MISC: {{vault-hash-misc}}
          VAULT_HASH_PASSWORD: {{vault-hash-password}}
          VAULT_TOKEN: {{vault-token}}
        inputs:
        - name: concourse-deploy-cloudfoundry
        - name: omg-cli
        - name: omg-product-bundle
        outputs:
- name: deploy
  plan:
    - aggregate:
      - get: cf-release
      - get: garden-release
      - get: diego-release
      - get: etcd-release
      - get: cf-mysql-release
      - get: cflinuxfs2-release
      - get: stemcell
      - get: concourse-deploy-cloudfoundry
      - get: omg-cli
        params:
          globs:
          - omg-linux
      - get: omg-product-bundle
        params:
          globs:
          - oss-cf-plugin-linux
        trigger: true
    - task: generate-manifest
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: virtmerlin/deploy-worker
        run:
          path: concourse-deploy-cloudfoundry/ci/oss-tasks/generate-manifest.sh
        params:
          BOSH_CLIENT: {{bosh-client-id}}
          BOSH_CLIENT_SECRET: {{bosh-client-secret}}
          BOSH_CACERT: {{bosh-cacert}}
          CLOUD_CONFIG_PLUGIN: {{cloud-config-plugin}}
          PRODUCT_PLUGIN: {{product-plugin}}
          VAULT_ADDR: {{vault-addr}}
          VAULT_HASH_IP: {{vault-hash-ip}}
          VAULT_HASH_HOSTVARS: {{vault-hash-hostvars}}
          VAULT_HASH_KEYCERT: {{vault-hash-keycert}}
          VAULT_HASH_MISC: {{vault-hash-misc}}
          VAULT_HASH_PASSWORD: {{vault-hash-password}}
          VAULT_TOKEN: {{vault-token}}
        inputs:
        - name: cf-release
        - name: garden-release
        - name: diego-release
        - name: etcd-release
        - name: cf-mysql-release
        - name: cflinuxfs2-release
        - name: stemcell
        - name: concourse-deploy-cloudfoundry
        - name: omg-cli
        - name: omg-product-bundle
        outputs:
        - name: manifest
          path: ""
    - put: {{deployment-name}}
      params:
        manifest: manifest/deployment.yml
        stemcells:
        - stemcell/*.tgz
        releases:
        - cf-release/*.tgz
        - garden-release/*.tgz
        - diego-release/*.tgz
        - etcd-release/*.tgz
        - cf-mysql-release/*.tgz
        - cflinuxfs2-release/*.tgz
      on_success:
        put: slack
        params:
          text: |
            :white_check_mark: Successfully deployed {{deployment-name}} CF
            <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: {{slack-channel}}
          username: {{slack-username}}
          icon_url: {{slack-icon-url}}
      on_failure:
        put: slack
        params:
          text: |
            :x: FAILED to deploy {{deployment-name}} CF
            <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
          channel: {{slack-channel}}
          username: {{slack-username}}
          icon_url: {{slack-icon-url}}
- name: run-smoke-tests
  plan:
  - aggregate:
    - get: pipeline-tasks
      trigger: false
    - get: {{deployment-name}}
      passed: [deploy]
      trigger: true
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{bosh-url}}
      BOSH_USERNAME: {{bosh-user}}
      BOSH_PASSWORD: {{bosh-pass}}
      BOSH_DEPLOYMENT_NAME: {{deployment-name}}
      BOSH_ERRAND: smoke_tests
      BOSH_CACERT: {{bosh-cacert}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Smoke tests for {{deployment-name}} CF passed
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_failure:
      put: slack
      params:
        text: |
          :x: Smoke tests for {{deployment-name}} CF failed
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
- name: run-acceptance-tests
  plan:
  - aggregate:
    - get: pipeline-tasks
      trigger: false
    - get: {{deployment-name}}
      passed: [run-smoke-tests]
      trigger: true
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{bosh-url}}
      BOSH_USERNAME: {{bosh-user}}
      BOSH_PASSWORD: {{bosh-pass}}
      BOSH_DEPLOYMENT_NAME: {{deployment-name}}
      BOSH_ERRAND: smoke_tests
      BOSH_CACERT: {{bosh-cacert}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Acceptance tests for {{deployment-name}} CF passed
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_failure:
      put: slack
      params:
        text: |
          :x: Acceptance tests for {{deployment-name}} CF failed
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
